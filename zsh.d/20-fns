# -*- sh -*-

e() {
    local d

    if [[ -z "$1" ]]; then
        d=../$(basename $PWD)
    else
        d="$1"
    fi

    emacs -nw "$d"
}

psg() { 
  ps="ps -ef"
  [ $OS = "Darwin" ] && ps="ps jax"
  eval $ps | grep -i $1 | grep -v grep
}

screen_running() {
  [[ -n $STY ]]
}

tmux_running() {
  [[ -n $TMUX ]]
}

es_running() {
  if tmux_running; then
    tmux list-windows | fgrep -q ' esrun ['
  fi
}

not_in_emacs() {
  [[ ! -n $EMACS ]]
}

not_in_cloud() {
  ! fgrep -q ami_id /etc/motd 2>/dev/null
}

tun() {
  ssh -NCf -R 10000:localhost:22 valve
}

killtun() {
  pkill -f '10000:localhost:22'
}

sshs() {
  h=$1
  t=${2:-$1}
  if tmux_running; then
    tmux neww -n $t "exec ssh $h"
  elif screen_running; then
    screen -t $t exec ssh $h
  else
    ssh $h
  fi
}

start-es() {
  if tmux_running; then
    if es_running; then
      echo elasticsearch already running
    else
      tmux neww -n "esrun" "cd ~/tmp/es-3; bin/elasticsearch -f"
      tmux splitw -d "cd ~/tmp/es-1; bin/elasticsearch -f"
      tmux splitw -d "cd ~/tmp/es-2; bin/elasticsearch -f"
    fi
  fi
}

esmon() {                               
  local name=$1
  local host=$2
  tmux neww \
    "exec ssh $host fgrep role /etc/motd\; curl -s p.draines.com/health.sh \| zsh"
  tmux split-window -h \
    "exec ssh $host fgrep role /etc/motd\; curl -s p.draines.com/heap.sh \| zsh"
  tmux resize-pane -L 10
  tmux rename-window $name-$host
}

esmaster() {
  local clus=$1
  local q=$2
  ENV=$clus knife ssh $q -x drew -a ec2.public_ipv4 \
   "curl -s p.draines.com/cluster.sh | zsh | fgrep \*" \
   | sort -uk12
}

gitcb() {
  b=$1
  git checkout -b $(basename $b) $b
}

update_auth_sock() {
  if [[ -n $TMUX ]]; then
    TMUX_SOCK=$(echo $TMUX|cut -d , -f 1)
    NEW_SSH_AUTH_SOCK=$(tmux -S $TMUX_SOCK showenv|grep ^SSH_AUTH_SOCK|cut -d = -f 2)
    if [[ -n $NEW_SSH_AUTH_SOCK ]] && [[ -S $NEW_SSH_AUTH_SOCK ]]; then
      SSH_AUTH_SOCK=$NEW_SSH_AUTH_SOCK
    fi
  fi
}
preexec_functions+=update_auth_sock

enumerate_huh() {
  # This *should* be the same as the following function.  But it
  # doesn't work right.
  awk -v a=$1 -v b=$2 \
    'BEGIN{c=1};{printf("host %s%02d.%s\n  hostname %s\n\n", $a, c++, $b, $1)}'
}

enumerate_ssh() {
  sort | awk -v pat="host $1%02d.$2\n  hostname %s\n\n" \
    'BEGIN{c=1};{printf(pat, c++, $1)}'
}

s3cfg() {
  l=~/.s3cfg
  targ=.s3cfg-$1
  if [[ -e $HOME/$targ ]]; then
    [[ -e $l ]] && rm $l
    ln -s $targ $l
  else
    basename `readlink ~/.s3cfg` | sed 's/.s3cfg-\(.*\)/\1/'
  fi
}

chef-me() {
  export OPSCODE_USER=sonian_developer
  . ~/.rvm/scripts/rvm && rvm use 1.9.2
}

knife-delete() {
  knife node delete $*
  knife client delete $*
  knife ec2 server delete $*
}

lset() {
  local profile=$1
  if [[ -z $profile ]]; then
    echo $LEDGER_FILE
  else
    case $profile in
      (trinity)
        LEDGER_FILE=~/etc/trinity/trinity.dat
        ;;
      (*)
        LEDGER_FILE=~/etc/ledger/${profile}.dat
        ;;
    esac
  fi
}

l() {
  if [[ $TERM == "dumb" ]]; then
    COLUMNS=80 ledger $* | cat
  else
    COLUMNS=80 ledger $*
  fi
}

snapdir() {
  dirname="$(basename $(pwd))"
  snapdir="../${dirname}-`date +%Y%m%d%H%M%S`"

  mkdir "$snapdir"
  tar cf - . | ( cd ${snapdir}; tar xf - )
}

localip() {
  ssh -n $1 fgrep local_ip /etc/motd | awk '{print $2}'
}

count() {
  curl -s localhost:9200/$1/_count\?q=\*:\*; echo
}

mib() {
  s=0
  while read n; do
    s=$((s+$n))
  done
  printf "%0.2f\n" $((s/(1024*1024.0)))
}

gib() {
  s=0
  while read n; do
    s=$((s+$n))
  done
  printf "%0.2f\n" $((s/(1024*1024*1024.0)))
}

avg() {
  s=0
  c=0
  while read n; do
    s=$((s+$n))
    c=$((c+1))
  done
  printf "%0.2f\n" $((s/(c*1.0)))
}

max() {
  read max
  while read n; do
    if [[ n -gt $max ]]; then
      max=$n
    fi
  done
  printf "$max\n"
}

min() {
  read min
  while read n; do
    if [[ n -lt $min ]]; then
      min=$n
    fi
  done
  printf "$min\n"
}

j() {
  python -mjson.tool
}

p() {
  zsh <(curl -s p.draines.com/sh)
}

draines() {
  curl -s p.draines.com/$1 | zsh
}

cluster() {
  draines cluster.sh
}

shards() {
  draines shards.sh
}

indices() {
  curl -s p.draines.com/indices.sh | zsh -s $*
}

health() {
  curl -s p.draines.com/health.py | python -
}

localip() {
  ssh $1 fgrep local_ip /etc/motd
}

publicip() {
  ssh $1 fgrep public_ip /etc/motd
}

fix-agent() {
  if [[ $DISPLAY == ":0.0" ]]; then
    # X
    export SSH_AUTH_SOCK=$(find /run/. -uid $UID -path \*keyring\* -type s -name ssh 2>/dev/null | xargs ls -rt | tail -1)
  else
    # ssh
    export SSH_AUTH_SOCK=`/bin/ls -t1 $(find /tmp/. -uid $UID -path \\*ssh\\* -type s 2> /dev/null) | head -1`
  fi
  export GPG_AGENT_INFO=`/bin/ls -t1 $(find /tmp/. -uid $UID -name S.gpg-agent -type s 2>/dev/null) | head -1`:0:1
}
